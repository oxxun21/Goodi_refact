{"version":3,"file":"static/js/895.74c296f9.chunk.js","mappings":"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","sources":["components/PostProductWriting/UIcomponents/UpdatePostWriting.tsx","components/PostProductWriting/UIcomponents/UpdateProductWriting.tsx","components/PostProductWriting/UpdateTotalUI.tsx","pages/ProductUpdate.tsx"],"sourcesContent":["import React from \"react\";\r\nimport * as T from \"../writingUI.styled\";\r\n\r\nimport { Textarea, Button } from \"../../common\";\r\nimport { PostWriting_I } from \"../../../interface\";\r\n\r\ninterface UpdatePostWritingProps {\r\n  handleInputChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\r\n  data: PostWriting_I;\r\n}\r\n\r\nexport default function UpdatePostWriting({ handleInputChange, data }: UpdatePostWritingProps) {\r\n  return (\r\n    <T.ContentUploadWrap>\r\n      <T.InputWrap>\r\n        <T.Label>게시글 내용</T.Label>\r\n        <Textarea height=\"300px\" placeholder=\"게시글 내용을 입력해주세요\" value={data.content} onChange={handleInputChange} name=\"content\" maxLength={100} required />\r\n      </T.InputWrap>\r\n\r\n      <Button type=\"submit\" text={\"게시글 업로드 하기\"} br=\"4px\" />\r\n    </T.ContentUploadWrap>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport * as T from \"../writingUI.styled\";\r\n\r\nimport { Input, Textarea, Button } from \"../../common\";\r\nimport { ProductWriting_I } from \"../../../interface\";\r\n\r\ninterface UpdateProductWritingProps {\r\n  handleInputChange: (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>) => void;\r\n  data: ProductWriting_I;\r\n}\r\n\r\nexport default function UpdateProductWriting({ handleInputChange, data }: UpdateProductWritingProps) {\r\n  return (\r\n    <T.ContentUploadWrap>\r\n      <T.InputWrap>\r\n        <T.Label>상품명</T.Label>\r\n        <Input name=\"itemName\" placeholder=\"상품명을 입력해주세요\" type=\"text\" onChange={handleInputChange} value={data.itemName} required />\r\n      </T.InputWrap>\r\n\r\n      <T.InputWrap>\r\n        <T.Label>상품가격</T.Label>\r\n        <Input type=\"number\" placeholder=\"상품가격을 입력해주세요\" name=\"price\" value={data.price} onChange={handleInputChange} required />\r\n      </T.InputWrap>\r\n\r\n      <T.InputWrap>\r\n        <T.Label>상품 설명</T.Label>\r\n        <Textarea height=\"100px\" placeholder=\"상품에 대한 설명을 입력해주세요\" value={data.link} onChange={handleInputChange} name=\"link\" required />\r\n      </T.InputWrap>\r\n\r\n      <Button type=\"submit\" text={\"상품 업로드 하기\"} br=\"4px\" />\r\n    </T.ContentUploadWrap>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport * as T from \"./writingUI.styled\";\r\nimport { useLocation, useParams } from \"react-router\";\r\n\r\nimport ImageSection from \"./UIcomponents/ImageSection\";\r\nimport UpdatePostWriting from \"./UIcomponents/UpdatePostWriting\";\r\nimport UpdateProductWriting from \"./UIcomponents/UpdateProductWriting\";\r\nimport { ProductWriting_I, PostWriting_I } from \"../../interface\";\r\n\r\ninterface UpdateTotalUIProps<T> {\r\n  src: string;\r\n  subtext: string;\r\n  send: (e: React.FormEvent) => void;\r\n  errorMSG?: string;\r\n  imageWrap: string[];\r\n  setImageWrap: React.Dispatch<React.SetStateAction<string[]>>;\r\n  data: T | null;\r\n  setData: React.Dispatch<React.SetStateAction<T | null>>;\r\n}\r\n\r\nexport default function UpdateTotalUI<T>({ src, subtext, data, setData, send, imageWrap, setImageWrap, errorMSG }: UpdateTotalUIProps<T>) {\r\n  const location = useLocation();\r\n  const locationID = useParams();\r\n\r\n  const handleInputChange = async (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const { name, value } = e.target;\r\n    setData(\r\n      (prevData) =>\r\n        ({\r\n          ...(prevData as object),\r\n          [name]: value,\r\n        } as T)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <T.PostingWrap>\r\n      <T.PostUiWrap>\r\n        <h2 className=\"a11y-hidden\">수정 페이지</h2>\r\n        <img src={src} alt={src} />\r\n        <p>{subtext}</p>\r\n        {errorMSG && <p>{errorMSG}</p>}\r\n\r\n        <T.UploadWrap onSubmit={send}>\r\n          <ImageSection imageWrap={imageWrap} setImageWrap={setImageWrap} />\r\n\r\n          <T.Line />\r\n\r\n          {location.pathname === `/post/${locationID.posting_id}` && <UpdatePostWriting handleInputChange={handleInputChange} data={data as PostWriting_I} />}\r\n\r\n          {location.pathname === `/product/${locationID.product_id}` && <UpdateProductWriting data={data as ProductWriting_I} handleInputChange={handleInputChange} />}\r\n        </T.UploadWrap>\r\n      </T.PostUiWrap>\r\n    </T.PostingWrap>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n//component\r\nimport Layout from \"../layout/Layout\";\r\nimport UpdateTotalUI from \"../components/PostProductWriting/UpdateTotalUI\";\r\n\r\n// 이미지\r\nimport ProductUpload from \"../assets/Prodcut_upload.svg\";\r\n\r\n// API\r\nimport { productGetUpdateAPI, productPutAPI } from \"../api\";\r\n\r\nimport { ProductWriting_I } from \"../interface\";\r\n\r\nexport default function ProductUpdate() {\r\n  const { product_id } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const [imageWrap, setImageWrap] = useState<string[]>([]);\r\n  const [data, setData] = useState<ProductWriting_I | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProduct = async () => {\r\n      const response = await productGetUpdateAPI(product_id);\r\n      setData({\r\n        id: response.product.id,\r\n        itemName: response.product.itemName,\r\n        price: response.product.price,\r\n        link: response.product.link,\r\n        itemImage: response.product.itemImage,\r\n      });\r\n      setImageWrap(response.product.itemImage.split(\",\"));\r\n    };\r\n    fetchProduct();\r\n  }, []);\r\n\r\n  const productUpdateSend = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (data) {\r\n      const updatedProductData: ProductWriting_I = {\r\n        id: data.id,\r\n        itemName: data.itemName,\r\n        price: data.price,\r\n        link: data.link,\r\n        itemImage: imageWrap.join(\",\"),\r\n      };\r\n      await productPutAPI(product_id, updatedProductData);\r\n\r\n      navigate(`/productDetail/${product_id}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout reduceTop={true}>\r\n      {data && <UpdateTotalUI src={ProductUpload} subtext=\"상품을 수정해주세요\" data={data} send={productUpdateSend} setData={setData} setImageWrap={setImageWrap} imageWrap={imageWrap} />}\r\n    </Layout>\r\n  );\r\n}\r\n"],"names":["UpdatePostWriting","_ref","handleInputChange","data","_jsxs","T","children","_jsx","Textarea","height","placeholder","value","content","onChange","name","maxLength","required","Button","type","text","br","UpdateProductWriting","Input","itemName","price","link","UpdateTotalUI","src","subtext","setData","send","imageWrap","setImageWrap","errorMSG","location","useLocation","locationID","useParams","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","_e$target","wrap","_context","prev","next","target","prevData","_objectSpread","_defineProperty","stop","_x","apply","arguments","className","alt","onSubmit","ImageSection","pathname","concat","posting_id","product_id","ProductUpdate","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","useEffect","fetchProduct","response","productGetUpdateAPI","sent","id","product","itemImage","split","productUpdateSend","_callee2","updatedProductData","_context2","preventDefault","join","productPutAPI","Layout","reduceTop","ProductUpload"],"sourceRoot":""}