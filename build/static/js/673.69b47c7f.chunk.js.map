{"version":3,"file":"static/js/673.69b47c7f.chunk.js","mappings":"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","sources":["components/PostProductWriting/UIcomponents/PostWriting.tsx","components/PostProductWriting/UIcomponents/ProductWriting.tsx","components/PostProductWriting/UploadTotalUI.tsx","pages/ProductUpload.tsx"],"sourcesContent":["import * as T from \"../writingUI.styled\";\r\n\r\nimport { Textarea, Button } from \"../../common\";\r\n\r\nexport default function PostWriting({ errorMSG }: { errorMSG: string }) {\r\n  return (\r\n    <T.ContentUploadWrap>\r\n      <T.InputWrap>\r\n        <T.Label>게시글 내용</T.Label>\r\n        <Textarea height=\"300px\" placeholder=\"게시글 내용을 입력해주세요\" name=\"content\" maxLength={100} required />\r\n      </T.InputWrap>\r\n\r\n      <T.ErrorMassage>{errorMSG}</T.ErrorMassage>\r\n      <Button type=\"submit\" text={\"게시글 업로드 하기\"} br=\"4px\" />\r\n    </T.ContentUploadWrap>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport * as T from \"../writingUI.styled\";\r\n\r\nimport { Input, Textarea, Button } from \"../../common\";\r\n\r\nexport default function ProductWriting({ errorMSG }: { errorMSG: string }) {\r\n  return (\r\n    <T.ContentUploadWrap>\r\n      <T.InputWrap>\r\n        <T.Label>상품명</T.Label>\r\n        <Input name=\"itemName\" placeholder=\"상품명을 입력해주세요\" type=\"text\" required />\r\n      </T.InputWrap>\r\n\r\n      <T.InputWrap>\r\n        <T.Label>상품가격</T.Label>\r\n        <Input type=\"number\" placeholder=\"상품가격을 입력해주세요\" name=\"price\" required />\r\n      </T.InputWrap>\r\n\r\n      <T.InputWrap>\r\n        <T.Label>상품 설명</T.Label>\r\n        <Textarea height=\"100px\" placeholder=\"상품에 대한 설명을 입력해주세요\" maxLength={100} name=\"link\" required />\r\n      </T.InputWrap>\r\n\r\n      <T.ErrorMassage>{errorMSG}</T.ErrorMassage>\r\n      <Button type=\"submit\" text={\"상품 업로드 하기\"} br=\"4px\" />\r\n    </T.ContentUploadWrap>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport * as T from \"./writingUI.styled\";\r\nimport { useLocation } from \"react-router\";\r\n\r\n// 컴포넌트\r\nimport ImageSection from \"./UIcomponents/ImageSection\";\r\nimport PostWriting from \"./UIcomponents/PostWriting\";\r\nimport ProductWriting from \"./UIcomponents/ProductWriting\";\r\n\r\ninterface UploadTotalUIProps {\r\n  src: string;\r\n  subtext: string;\r\n  send: (e: React.FormEvent) => void;\r\n  errorMSG: string;\r\n  imageWrap: string[];\r\n  setImageWrap: React.Dispatch<React.SetStateAction<string[]>>;\r\n  formRef: React.RefObject<HTMLFormElement>;\r\n}\r\n\r\nexport default function UploadTotalUI({ src, subtext, send, errorMSG, imageWrap, setImageWrap, formRef }: UploadTotalUIProps) {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <T.PostingWrap>\r\n      <T.PostUiWrap>\r\n        <h2 className=\"a11y-hidden\">업로드 페이지</h2>\r\n        <img src={src} alt={src} />\r\n        <p>{subtext}</p>\r\n\r\n        <T.UploadWrap onSubmit={send} ref={formRef}>\r\n          <ImageSection imageWrap={imageWrap} setImageWrap={setImageWrap} />\r\n\r\n          <T.Line />\r\n\r\n          {location.pathname === \"/postUpload\" && <PostWriting errorMSG={errorMSG} />}\r\n\r\n          {location.pathname === \"/productUpload\" && <ProductWriting errorMSG={errorMSG} />}\r\n        </T.UploadWrap>\r\n      </T.PostUiWrap>\r\n    </T.PostingWrap>\r\n  );\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//component\r\nimport Layout from \"../layout/Layout\";\r\nimport UploadTotalUI from \"../components/PostProductWriting/UploadTotalUI\";\r\n\r\n//이미지\r\nimport productUpload from \"../assets/Prodcut_upload.svg\";\r\n\r\n//API\r\nimport { productUploadAPI } from \"../api\";\r\n\r\nexport default function ProductUpload() {\r\n  const navigate = useNavigate();\r\n  const formRef = useRef<HTMLFormElement>(null);\r\n\r\n  const [imageWrap, setImageWrap] = useState<string[]>([]);\r\n  const [errorMSG, setErrorMSG] = useState(\"\");\r\n\r\n  const handleProduct = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    const formElements = formRef.current as HTMLFormElement;\r\n    if (formRef.current instanceof HTMLFormElement) {\r\n      const itemName = formElements.elements.namedItem(\"itemName\") as HTMLInputElement;\r\n      const price = formElements.elements.namedItem(\"price\") as HTMLInputElement;\r\n      const link = formElements.elements.namedItem(\"link\") as HTMLInputElement;\r\n\r\n      const response = await productUploadAPI({\r\n        link: link.value,\r\n        itemName: itemName.value,\r\n        price: parseInt(price.value),\r\n        itemImage: imageWrap.join(\",\"),\r\n      });\r\n\r\n      if (response?.status === 200) {\r\n        navigate(`/productDetail/${response.data.product.id}`);\r\n      }\r\n      if (response?.status === 422) {\r\n        setErrorMSG(response.data.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout reduceTop={true}>\r\n      <UploadTotalUI src={productUpload} subtext=\"당신의 상품을 업로드 해보세요!\" send={handleProduct} errorMSG={errorMSG} imageWrap={imageWrap} setImageWrap={setImageWrap} formRef={formRef} />\r\n    </Layout>\r\n  );\r\n}\r\n"],"names":["PostWriting","_ref","errorMSG","_jsxs","T","children","_jsx","Textarea","height","placeholder","name","maxLength","required","Button","type","text","br","ProductWriting","Input","UploadTotalUI","src","subtext","send","imageWrap","setImageWrap","formRef","location","useLocation","className","alt","onSubmit","ref","ImageSection","pathname","ProductUpload","navigate","useNavigate","useRef","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","setErrorMSG","handleProduct","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","formElements","itemName","price","link","response","wrap","_context","prev","next","preventDefault","current","HTMLFormElement","elements","namedItem","productUploadAPI","value","parseInt","itemImage","join","sent","status","concat","data","product","id","message","stop","_x","apply","arguments","Layout","reduceTop","productUpload"],"sourceRoot":""}