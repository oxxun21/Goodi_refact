{"version":3,"file":"static/js/974.094a6117.chunk.js","mappings":"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","sources":["components/PostProductWriting/UIcomponents/PostWriting.jsx","components/PostProductWriting/UIcomponents/ProductWriting.jsx","components/PostProductWriting/UploadTotalUI.jsx","pages/ProductUpload.jsx"],"sourcesContent":["import React from \"react\";\r\nimport * as T from \"../writingUI.styled\";\r\n\r\nimport { Textarea, Button } from \"./../../common\";\r\n\r\nexport default function PostWriting({ inputRef, errorMSG }) {\r\n  return (\r\n    <T.ContentUploadWrap ref={inputRef}>\r\n      <T.InputWrap>\r\n        <T.Label>게시글 내용</T.Label>\r\n        <Textarea width=\"100%\" height=\"300px\" placeholder=\"게시글 내용을 입력해주세요\" name=\"content\" maxLength={100} required />\r\n      </T.InputWrap>\r\n\r\n      <T.ErrorMassage>{errorMSG}</T.ErrorMassage>\r\n      <Button type=\"submit\" height=\"56px\" text={\"게시글 업로드 하기\"} br=\"4px\" />\r\n    </T.ContentUploadWrap>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport * as T from \"../writingUI.styled\";\r\n\r\nimport { Input, Textarea, Button } from \"./../../common\";\r\n\r\nexport default function ProductWriting({ errorMSG, inputRef }) {\r\n  return (\r\n    <T.ContentUploadWrap ref={inputRef}>\r\n      <T.InputWrap>\r\n        <T.Label>상품명</T.Label>\r\n        <Input width=\"100%\" name=\"itemName\" placeholder=\"상품명을 입력해주세요\" type=\"text\" required />\r\n      </T.InputWrap>\r\n\r\n      <T.InputWrap>\r\n        <T.Label>상품가격</T.Label>\r\n        <Input width=\"100%\" type=\"number\" placeholder=\"상품가격을 입력해주세요\" name=\"price\" required />\r\n      </T.InputWrap>\r\n\r\n      <T.InputWrap>\r\n        <T.Label>상품 설명</T.Label>\r\n        <Textarea width=\"100%\" height=\"100px\" placeholder=\"상품에 대한 설명을 입력해주세요\" maxLength={100} name=\"link\" required />\r\n      </T.InputWrap>\r\n\r\n      <T.ErrorMassage>{errorMSG}</T.ErrorMassage>\r\n      <Button type=\"submit\" height=\"56px\" text={\"상품 업로드 하기\"} br=\"4px\" />\r\n    </T.ContentUploadWrap>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport * as T from \"./writingUI.styled\";\r\nimport { useLocation } from \"react-router\";\r\n\r\n// 컴포넌트\r\nimport ImageSection from \"./UIcomponents/ImageSection\";\r\nimport PostWriting from \"./UIcomponents/PostWriting\";\r\nimport ProductWriting from \"./UIcomponents/ProductWriting\";\r\n\r\nexport default function UploadTotalUI(props) {\r\n  const { src, subtext, send, errorMSG, imageWrap, setImageWrap, inputRef } = props;\r\n\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <T.PostingWrap>\r\n      <T.PostUiWrap>\r\n        <h2 className=\"a11y-hidden\">업로드 페이지</h2>\r\n        <img src={src} alt={src} />\r\n        <p>{subtext}</p>\r\n\r\n        <T.UploadWrap onSubmit={send}>\r\n          <ImageSection imageWrap={imageWrap} setImageWrap={setImageWrap} />\r\n\r\n          <T.Line />\r\n\r\n          {location.pathname === \"/postUpload\" && <PostWriting inputRef={inputRef} errorMSG={errorMSG} />}\r\n\r\n          {location.pathname === \"/productUpload\" && <ProductWriting errorMSG={errorMSG} inputRef={inputRef} />}\r\n        </T.UploadWrap>\r\n      </T.PostUiWrap>\r\n    </T.PostingWrap>\r\n  );\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//component\r\nimport Layout from \"../layout/Layout\";\r\nimport UploadTotalUI from \"../components/PostProductWriting/UploadTotalUI\";\r\n\r\n//이미지\r\nimport productUpload from \"../assets/Prodcut_upload.svg\";\r\n\r\n//API\r\nimport { productUploadAPI } from \"../api\";\r\n\r\nexport default function ProductUpload() {\r\n  const navigate = useNavigate();\r\n  const inputRef = useRef();\r\n\r\n  const [imageWrap, setImageWrap] = useState([]);\r\n  const [errorMSG, setErrorMSG] = useState(\"\");\r\n\r\n  const handleProduct = async (e) => {\r\n    const { itemName, price, link } = inputRef.current.elements;\r\n    e.preventDefault();\r\n\r\n    const response = await productUploadAPI({\r\n      link: link.value,\r\n      itemName: itemName.value,\r\n      price: parseInt(price.value),\r\n      itemImage: imageWrap.join(\",\"),\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      navigate(`/productDetail/${response.data.product.id}`);\r\n    }\r\n    if (response.status === 422) {\r\n      setErrorMSG(response.data.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout reduceTop=\"true\">\r\n      <UploadTotalUI src={productUpload} subtext=\"당신의 상품을 업로드 해보세요!\" send={handleProduct} errorMSG={errorMSG} imageWrap={imageWrap} setImageWrap={setImageWrap} inputRef={inputRef} />\r\n    </Layout>\r\n  );\r\n}\r\n"],"names":["PostWriting","_ref","inputRef","errorMSG","_jsxs","T","ref","children","_jsx","Textarea","width","height","placeholder","name","maxLength","required","Button","type","text","br","ProductWriting","Input","UploadTotalUI","props","src","subtext","send","imageWrap","setImageWrap","location","useLocation","className","alt","onSubmit","ImageSection","pathname","ProductUpload","navigate","useNavigate","useRef","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","setErrorMSG","handleProduct","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","_inputRef$current$ele","itemName","price","link","response","wrap","_context","prev","next","current","elements","preventDefault","productUploadAPI","value","parseInt","itemImage","join","sent","status","concat","data","product","id","message","stop","_x","apply","arguments","Layout","reduceTop","productUpload"],"sourceRoot":""}